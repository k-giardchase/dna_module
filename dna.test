<?php

class DNAUnitTestCase extends DrupalUnitTestCase
{

    public static function getInfo()
    {
        return array(
            'name' => 'DNA unit tests',
            'description' => 'Test that functionality within DNA module works properly',
            'group' => 'Epicodus Example Tests',
        );
    }

    // public function setUp(){
    //      drupal_load('module', 'dna');
    //      parent::setUp();
    //  }

    function testDNAModule()
    {
        $description = 'An A nucleotide is entered and a T is returned.';
        $input = 'A';
        $result = sequence_dna($input);
        $expected_output = 'T';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'An AT nucleotide is entered and TA is returned.';
        $input = 'AT';
        $result = sequence_dna($input);
        $expected_output = 'TA';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'An ATG nucleotide is entered and TAC is returned.';
        $input = 'ATG';
        $result = sequence_dna($input);
        $expected_output = 'TAC';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'An ATGC nucleotide is entered and TACG is returned.';
        $input = 'ATGC';
        $result = sequence_dna($input);
        $expected_output = 'TACG';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'A non-friendly input is entered of aT gcAA and a friendly input TACGTT is returned.';
        $input = 'aT gcAA';
        $result = sequence_dna($input);
        $expected_output = 'TACGTT';
        $this->assertEqual($result, $expected_output, $description);

    }
}

class DNAFunctionalTests extends DrupalWebTestCase {

    public static function getInfo() {
        return array(
            'name' => 'DNA Functional Tests',
            'description' => 'Tests accessibility for the DNA module',
            'group' => 'Epicodus Examples Tests',
        );
    }

    public function setUp() {
        parent::setUp(array('dna'));
        $user = $this->drupalCreateAdminUser();
        $this->drupalLogin($user);

        $info = array();
        $info['title'] = "DNA Success";
        $info['body[und][0][value]'] = "Here is the other half of your helix: AATTGG";
        $this->drupalPost('node/add/page', $info, t('Save'));
        $path['source'] = 'node/1';
        $path['alias'] = 'dna_success';
        path_save($path);
    }

    public function drupalCreateAdminUser(array $permissions = array()) {
        $roles = user_roles();
        $index = array_search('administrator', $roles);
        $user = $this->drupalCreateUser($permissions);
        $user->roles[$index] = 'administrator';
        return user_save($user);
    }

    public function testDNASequenceSubmission() {
        $user = $this->drupalCreateAdminUser();
        $this->drupalLogin($user);
        $form_state['values']['sequence'] = 'TTAACC';
        drupal_form_submit('dna_form', $form_state);
        $this->assertText('DNA Success', 'Here is the other half of your helix: AATTGG');
    }
}

?>
