<?php

class DNAUnitTestCase extends DrupalUnitTestCase
{

    public static function getInfo()
    {
        return array(
            'name' => 'DNA unit tests',
            'description' => 'Test that functionality within DNA module works properly',
            'group' => 'Epicodus Example Tests',
        );
    }

    // public function setUp(){
    //      drupal_load('module', 'dna');
    //      parent::setUp();
    //  }

    function testDNAModule()
    {
        $description = 'An A nucleotide is entered and a T is returned.';
        $input = 'A';
        $result = sequence_dna($input);
        $expected_output = 'T';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'An AT nucleotide is entered and TA is returned.';
        $input = 'AT';
        $result = sequence_dna($input);
        $expected_output = 'TA';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'An ATG nucleotide is entered and TAC is returned.';
        $input = 'ATG';
        $result = sequence_dna($input);
        $expected_output = 'TAC';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'An ATGC nucleotide is entered and TACG is returned.';
        $input = 'ATGC';
        $result = sequence_dna($input);
        $expected_output = 'TACG';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'A non-friendly input is entered of aT gcAA and a friendly input TACGTT is returned.';
        $input = 'aT gcAA';
        $result = sequence_dna($input);
        $expected_output = 'TACGTT';
        $this->assertEqual($result, $expected_output, $description);

    }
}

class DNAFunctionalTests extends DrupalWebTestCase {

    public static function getInfo() {
        return array(
            'name' => 'DNA Functional Tests',
            'description' => 'Tests form for the DNA module',
            'group' => 'Epicodus Examples Tests',
        );
    }

    public function setUp() {
        parent::setUp(array('dna'));

        //set up what values to send to test
        $info = array();
        $info['sequence'] = "AACCGG";
        $this->drupalPost('dna-success', $info, t('Sequence'));
        //perform the drupal post with those settings on the right button
    }

    /* I am completely lost past this point */

    public function testDNASequenceSubmission() {

        //drupalGet to the results page of your module
        $this->drupalGet('dna-success');
        //assert that the texts equals what it should


        $this->assertText('For your input of AACCGG, the other half of your helix would be: TTGGCC', 'The Text on the page is correct');
    }
}

?>
